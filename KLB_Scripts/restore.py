import xbmc , xbmcaddon , xbmcgui , xbmcplugin , os
import shutil
import zipfile
oo000 = sys . version_info [ 0 ] >= 3
if ( oo000 ) :
 from io import StringIO
else :
 from StringIO import StringIO
import gzip
import requests
import io
import tempfile
import threading
#import extract
if 9 - 9: Ii . o0o00Oo0O - iI11I1II1I1I
import pyxbmct
if 71 - 71: ii
global iIIii1IIi , o0OO00 , oo , i1iII1IiiIiI1 , iIiiiI1IiI1I1 , o0OoOoOO00 , I11i , O0O , Oo
if 2 - 2: o0 * i1 * ii1IiI1i % OOooOOo / I11iIi1I / IiiIII111iI
I11i = 'script.kelebek'
if 34 - 34: iii1I1I / O00oOoOoO0o0O . O0oo0OO0 + Oo0ooO0oo0oO . I1i1iI1i - II
import six
if six . PY3 :
 import zipfile
elif six . PY2 :
 if 100 - 100: i11Ii11I1Ii1i . ooO - OOoO / ooo0Oo0 * I11iIi1I - Ii
 from lib import zipfile
 if 8 - 8: iii1I1I * O00oOoOoO0o0O * iI11I1II1I1I . ooO / ooO % ooO
O0O = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + I11i , 'icon.png' ) )
Oo = xbmc . translatePath ( os . path . join ( 'special://home/addons' , I11i , 'resources' ) )
if 22 - 22: II . ooO
def iIiiiI1IiI1I1 ( message , seconds ) :
 xbmc . executebuiltin ( 'XBMC.Notification(%s, %s, %s, %s)' % ( 'KELEBEK' , message , str ( seconds ) , O0O ) )
 if 41 - 41: OOoO . ooo0Oo0 * ooO % Ii
def o0OoOoOO00 ( message , seconds ) :
 o000o0o00o0Oo = threading . Thread ( target = iIiiiI1IiI1I1 , args = ( message , seconds ) )
 o000o0o00o0Oo . start ( )
 if 80 - 80: ii . ii1IiI1i
 if 87 - 87: O0oo0OO0 / ooo0Oo0 + OOoO - ooo0Oo0 . ooo0Oo0 / i1
class iIIii1IIi ( pyxbmct . AddonDialogWindow ) :
 def __init__ ( self , title = '' ) :
  super ( iIIii1IIi , self ) . __init__ ( title )
  self . setGeometry ( 750 , 250 , 4 , 5 )
  self . set_controls ( )
  self . set_navigation ( )
  if 11 - 11: ii1IiI1i % iii1I1I - OOooOOo
  self . connect ( pyxbmct . ACTION_NAV_BACK , self . close )
  if 58 - 58: Ii % OOoO
 def set_controls ( self ) :
  if 54 - 54: Oo0ooO0oo0oO % o0o00Oo0O + ii1IiI1i - i11Ii11I1Ii1i / I1i1iI1i
  self . fondo = pyxbmct . Image ( os . path . join ( Oo , 'fondoceleste.png' ) )
  self . placeControl ( self . fondo , 0 , 0 , 4 , 5 )
  if 31 - 31: I11iIi1I + i1
  if 13 - 13: Oo0ooO0oo0oO * O0oo0OO0 * ii1IiI1i
  oOOOO = pyxbmct . Label ( 'Restore Backup KODI' , alignment = pyxbmct . ALIGN_CENTER )
  self . placeControl ( oOOOO , 0 , 0 , 1 , 5 )
  if 45 - 45: OOoO + II
  if 17 - 17: iii1I1I
  self . brestaura = pyxbmct . Button ( 'Restaurar Local' ,
 textColor = '0xFFFBFCFA' ,
 focusedColor = '0xFF238303' ,
 noFocusTexture = os . path . join ( Oo , 'bgris.png' ) ,
 focusTexture = os . path . join ( Oo , 'bnaranja.png' ) )
  self . placeControl ( self . brestaura , 1 , 0 , 1 , 2 )
  if 64 - 64: II % o0 % ii
  self . connect ( self . brestaura , self . restaura )
  if 3 - 3: i11Ii11I1Ii1i + o0o00Oo0O
  self . bbaja = pyxbmct . Button ( 'Restaurar de la Nube' ,
 textColor = '0xFFFBFCFA' ,
 focusedColor = '0xFF238303' ,
 noFocusTexture = os . path . join ( Oo , 'bgris.png' ) ,
 focusTexture = os . path . join ( Oo , 'bnaranja.png' ) )
  self . placeControl ( self . bbaja , 1 , 3 , 1 , 2 )
  if 42 - 42: Oo0ooO0oo0oO / o0 + Ii - II
  self . connect ( self . bbaja , self . baja )
  self . lurl = pyxbmct . Label ( 'URL:' )
  self . placeControl ( self . lurl , 2 , 0 , 1 , 1 )
  self . url = pyxbmct . Edit ( '' ,
 textColor = '0xFFFBFCFA' ,
 noFocusTexture = os . path . join ( Oo , 'bgris.png' ) ,
 focusTexture = os . path . join ( Oo , 'bnaranja.png' ) )
  self . placeControl ( self . url , 2 , 1 , 1 , 4 )
  self . url . setText ( 'https://anonfiles.com/' )
  if 78 - 78: I11iIi1I
  self . bsalir = pyxbmct . Button ( 'Salir' ,
 textColor = '0xFFFBFCFA' ,
 focusedColor = '0xFF238303' ,
 noFocusTexture = os . path . join ( Oo , 'bgris.png' ) ,
 focusTexture = os . path . join ( Oo , 'bnaranja.png' ) )
  self . placeControl ( self . bsalir , 3 , 2 )
  if 18 - 18: o0o00Oo0O - i11Ii11I1Ii1i / i11Ii11I1Ii1i + ooo0Oo0 % ooo0Oo0 - ooO
  self . connect ( self . bsalir , self . close )
  if 62 - 62: i11Ii11I1Ii1i - ooO - IiiIII111iI % o0 / O0oo0OO0
 def set_navigation ( self ) :
  if 77 - 77: i1 - i1 . ii1IiI1i / iii1I1I
  if 14 - 14: I1i1iI1i % o0o00Oo0O
  if 41 - 41: o0 + OOoO + Oo0ooO0oo0oO - ooO
  if 77 - 77: OOooOOo . ooO % ooo0Oo0
  if 42 - 42: O0oo0OO0 - o0 / Ii + Oo0ooO0oo0oO + I11iIi1I
  if 17 - 17: O0oo0OO0 . OOooOOo . O00oOoOoO0o0O
  if 3 - 3: IiiIII111iI . OOooOOo . ii1IiI1i / II
  self . brestaura . setNavigation ( self . bsalir , self . url , self . bbaja , self . bbaja )
  self . bbaja . setNavigation ( self . bsalir , self . url , self . brestaura , self . brestaura )
  self . url . setNavigation ( self . brestaura , self . bsalir , self . brestaura , self . bbaja )
  self . bsalir . setNavigation ( self . url , self . brestaura , self . brestaura , self . bbaja )
  if 38 - 38: i1 % Ii . ooo0Oo0 - Oo0ooO0oo0oO + II
  if 66 - 66: ii * ii . Oo0ooO0oo0oO . o0 - Oo0ooO0oo0oO
  self . setFocus ( self . brestaura )
  if 77 - 77: I1i1iI1i - iI11I1II1I1I
 def setAnimation ( self , control ) :
  if 82 - 82: Ii . Oo0ooO0oo0oO / OOooOOo * o0o00Oo0O % O0oo0OO0 % iI11I1II1I1I
  control . setAnimations ( [ ( 'WindowOpen' , 'effect=fade start=0 end=100 time=500' , ) ,
 ( 'WindowClose' , 'effect=fade start=100 end=0 time=500' , ) ] )
 def restaura ( self ) :
  o0OO00 ( )
  if 78 - 78: iI11I1II1I1I - II * I11iIi1I + iii1I1I + i11Ii11I1Ii1i + i11Ii11I1Ii1i
 def baja ( self ) :
  oo ( self )
  if 11 - 11: i11Ii11I1Ii1i - I11iIi1I % ooo0Oo0 % i11Ii11I1Ii1i / IiiIII111iI - I11iIi1I
def i1iII1IiiIiI1 ( my_zip_file ) :
 o0o0oOOOo0oo = xbmcgui . DialogProgress ( )
 o0oo0o0O00OO = 0
 o0oO = 0
 try :
  if 48 - 48: I1i1iI1i + I1i1iI1i / i1 / iI11I1II1I1I
  o0o0oOOOo0oo . create ( 'RESTORE KELEBEK' , 'Comprobando archivos... ' + '\n' + '' + '\n' + 'Por favor, espere...' )
  o0o0oOOOo0oo . update ( 0 , "Extrayendo Archivo. Por favor, espere..." )
  if 20 - 20: iii1I1I
  o0oo0o0O00OO = len ( my_zip_file . namelist ( ) )
  o0oO = 0
  if 77 - 77: IiiIII111iI / I1i1iI1i
  for file in my_zip_file . namelist ( ) :
   if ( o0o0oOOOo0oo . iscanceled ( ) ) :
    o0o0oOOOo0oo . close ( )
    my_zip_file . close ( )
    dialog . ok ( 'RESTORE CANCELLED' , '[COLOR yellow]Restore cancelado.[/COLOR]' , '' , '' )
    sys . exit ( )
   o0oO = o0oO + 1
   Ooooo = o0oO / float ( o0oo0o0O00OO ) * 100
   o0o0oOOOo0oo . update ( int ( Ooooo ) , 'Extrayendo' + '\n' + '[COLOR red]%s[/COLOR]' % file + '\n' + 'Por favor, espera...' )
   try :
    my_zip_file . extract ( file , xbmc . translatePath ( 'special://home' ) )
   except Exception :
    I1I1i , oOOOoo0O0OoO , I1I1i = sys . exc_info ( )
    xbmc . log ( '[%s] %s' % ( 'EXCEPTION:' , str ( oOOOoo0O0OoO ) ) , 2 )
    return False
    if 6 - 6: O00oOoOoO0o0O
    if 31 - 31: II . II - iii1I1I / I11iIi1I + ooo0Oo0 * ii1IiI1i
  o0o0oOOOo0oo . close ( )
  if 63 - 63: OOoO % o0 / ii - ii
  return True
 except Exception :
  I1I1i , oOOOoo0O0OoO , I1I1i = sys . exc_info ( )
  xbmc . log ( '[%s] %s' % ( 'EXCEPTION:' , str ( oOOOoo0O0OoO ) ) , 2 )
  xbmc . executebuiltin ( 'Notification(%s, %s)' % ( 'ERROR:' , str ( oOOOoo0O0OoO ) ) )
  return False
  if 8 - 8: IiiIII111iI
def o0OO00 ( ) :
 o00O = xbmcgui . Dialog ( )
 OOO0OOO00oo = o00O . browseSingle ( 1 , 'KELEBEK' , '' , mask = '.zip' )
 if 31 - 31: i1 - Oo0ooO0oo0oO . OOoO % IiiIII111iI - o0o00Oo0O
 try :
  iii11 = zipfile . ZipFile ( OOO0OOO00oo )
  if ( i1iII1IiiIiI1 ( iii11 ) ) :
   o0OoOoOO00 ( 'RESTORE FINISHED' , 4000 )
   o00O . ok ( 'RESTORE FINISHED' , '[COLOR yellow]Restore realizado. Vamos a cerrar la Aplicacion.[/COLOR]' )
   xbmc . executebuiltin ( 'XBMC.Quit' )
   xbmc . executebuiltin ( "Action(Close)" )
  else :
   o0OoOoOO00 ( 'ERROR EXTRAYENDO' , 4000 )
  iii11 . close ( )
 except Exception :
  I1I1i , oOOOoo0O0OoO , I1I1i = sys . exc_info ( )
  xbmc . log ( '[%s] %s' % ( 'EXCEPTION:' , str ( oOOOoo0O0OoO ) ) , 2 )
  xbmc . executebuiltin ( 'Notification(%s, %s)' % ( 'ERROR:' , str ( oOOOoo0O0OoO ) ) )
  if 58 - 58: Oo0ooO0oo0oO * Ii / IiiIII111iI % OOoO - O00oOoOoO0o0O / O0oo0OO0
  if 50 - 50: ii1IiI1i
  if 34 - 34: ii1IiI1i * i1 % i11Ii11I1Ii1i * IiiIII111iI - ii1IiI1i
def oo ( ventana ) :
 II1III = ventana . url . getText ( )
 if ( II1III == '' ) :
  ventana . url . setText ( 'Por favor, introduzca URL' )
 else :
  o00O = xbmcgui . Dialog ( )
  iI1iI1I1i1I = requests . get ( II1III . rstrip ( '/' ) )
  from bs4 import BeautifulSoup
  iIi11Ii1 = BeautifulSoup ( iI1iI1I1i1I . content , "html.parser" )
  Ii11iII1 = iIi11Ii1 . find ( "a" , id = "download-url" )
  xbmc . log ( 'Enlace:' + Ii11iII1 [ 'href' ] , 2 )
  ventana . url . setText ( 'Bajando archivo. Espere, por favor...' )
  iI1iI1I1i1I = requests . get ( Ii11iII1 [ 'href' ] , headers = { 'referer' : 'https://anonfiles.com/' } )
  try :
   iii11 = zipfile . ZipFile ( io . BytesIO ( iI1iI1I1i1I . content ) )
   if ( i1iII1IiiIiI1 ( iii11 ) ) :
    o0OoOoOO00 ( 'RESTORE FINISHED' , 4000 )
    o00O . ok ( 'RESTORE FINISHED' , '[COLOR yellow]Restore realizado. Vamos a cerrar la Aplicacion.[/COLOR]' )
    xbmc . executebuiltin ( 'XBMC.Quit' )
    xbmc . executebuiltin ( "Action(Close)" )
   else :
    o0OoOoOO00 ( 'ERROR EXTRAYENDO' , 4000 )
   iii11 . close ( )
  except Exception :
   I1I1i , oOOOoo0O0OoO , I1I1i = sys . exc_info ( )
   xbmc . log ( '[%s] %s' % ( 'EXCEPTION:' , str ( oOOOoo0O0OoO ) ) , 2 )
   xbmc . executebuiltin ( 'Notification(%s, %s)' % ( 'ERROR:' , str ( oOOOoo0O0OoO ) ) )
   if 51 - 51: i1 * I11iIi1I % iii1I1I * i1 % O00oOoOoO0o0O / ooo0Oo0
   if 49 - 49: iii1I1I
try :
 IIii1Ii1 = iIIii1IIi ( '' )
 IIii1Ii1 . doModal ( )
 if 5 - 5: i11Ii11I1Ii1i % Oo0ooO0oo0oO + ooo0Oo0 % Ii + iii1I1I
 if 60 - 60: I11iIi1I * IiiIII111iI - I11iIi1I % ii - ooo0Oo0 + ii1IiI1i
 del IIii1Ii1
except Exception :
 I1I1i , oOOOoo0O0OoO , I1I1i = sys . exc_info ( )
 xbmc . log ( '[%s] %s' % ( 'EXCEPTION:' , str ( oOOOoo0O0OoO ) ) , 2 )
 xbmc . executebuiltin ( 'Notification(%s, %s)' % ( 'ERROR:' , str ( oOOOoo0O0OoO ) ) )
 if 70 - 70: ooO * OOooOOo * I1i1iI1i / II
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
