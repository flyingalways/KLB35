import xbmc , xbmcaddon , xbmcgui , xbmcplugin , os
import shutil
oo000 = sys . version_info [ 0 ] >= 3
if ( oo000 ) :
 from io import StringIO
else :
 from StringIO import StringIO
import gzip
import requests
import io
import tempfile
import threading
if 9 - 9: Ii . o0o00Oo0O - iI11I1II1I1I
import pyxbmct
import sys
if 71 - 71: ii
if 11 - 11: ii1I - ooO0OO000o
global ii11i , oOooOoO0Oo0O , iI1 , i1I11i , OoOoOO00 , I11i , O0O , Oo
global I1ii11iIi11i , I1IiI
if 73 - 73: OOooOOo / ii11ii1ii
#import sys
Oo = 'script.kelebek'
if 94 - 94: OoOO + OoOO0ooOOoo0O + o0000oOoOoO0o * o00O0oo
if 97 - 97: oO0o0ooO0 - IIII / O0oO - o0oO0
if 100 - 100: i11Ii11I1Ii1i
if 67 - 67: iiI1iIiI . ooo0Oo0 * i1 - o0000oOoOoO0o * o00O0oo * iI11I1II1I1I
if 13 - 13: o0oO0 * iiI1iIiI
if 90 - 90: iI11I1II1I1I / o0oO0
import six
if six . PY3 :
 import zipfile
elif six . PY2 :
 if 89 - 89: ii - iiI1iIiI * i1
 from lib import zipfile
 if 82 - 82: O0oO . ooo0Oo0 / iiI1iIiI % ooO0OO000o % iI11I1II1I1I % iiI1iIiI
 if 86 - 86: OoOO0ooOOoo0O % OOooOOo
 if 80 - 80: ii . OOooOOo
 if 87 - 87: oO0o0ooO0 / i1 + ooo0Oo0 - i1 . i1 / ooO0OO000o
 if 11 - 11: OOooOOo % o0000oOoOoO0o - ii11ii1ii
I1ii11iIi11i = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + Oo , 'icon.png' ) )
I1IiI = xbmc . translatePath ( os . path . join ( 'special://home/addons' , Oo , 'resources' ) )
if 58 - 58: Ii % ooo0Oo0
O0OoOoo00o = xbmcgui . DialogProgress ( )
iiiI11 = 0
OOooO = 0
if 58 - 58: OoOO + OoOO0ooOOoo0O / o0oO0 * ii
class ii11i ( pyxbmct . AddonDialogWindow ) :
 if 9 - 9: OOooOOo - o0oO0 % ii1I % ii
 def __init__ ( self , title = '' ) :
  super ( ii11i , self ) . __init__ ( title )
  self . setGeometry ( 600 , 300 , 4 , 3 )
  self . set_controls ( )
  self . set_navigation ( )
  if 3 - 3: i11Ii11I1Ii1i + o0o00Oo0O
  self . connect ( pyxbmct . ACTION_NAV_BACK , self . close )
  if 42 - 42: IIII / ii1I + Ii - o0oO0
 def set_controls ( self ) :
  if 78 - 78: OoOO
  self . fondo = pyxbmct . Image ( os . path . join ( I1IiI , 'fondoceleste.png' ) )
  self . placeControl ( self . fondo , 0 , 0 , 4 , 3 )
  if 18 - 18: o0o00Oo0O - i11Ii11I1Ii1i / i11Ii11I1Ii1i + i1 % i1 - iiI1iIiI
  if 62 - 62: i11Ii11I1Ii1i - iiI1iIiI - OoOO0ooOOoo0O % ii1I / oO0o0ooO0
  OoooooOoo = pyxbmct . Label ( 'Save GDrive APIS' , alignment = pyxbmct . ALIGN_CENTER )
  self . placeControl ( OoooooOoo , 0 , 0 , 1 , 3 )
  if 70 - 70: OoOO . OoOO - OoOO / o00O0oo * IIII
  if 86 - 86: Ii + o0oO0 + i1 * O0oO + o0000oOoOoO0o
  self . bguarda = pyxbmct . Button ( 'Local' ,
 textColor = '0xFFFBFCFA' ,
 focusedColor = '0xFF238303' ,
 noFocusTexture = os . path . join ( I1IiI , 'bgris.png' ) ,
 focusTexture = os . path . join ( I1IiI , 'bnaranja.png' ) )
  self . placeControl ( self . bguarda , 1 , 0 )
  if 61 - 61: OoOO / Ii
  self . connect ( self . bguarda , self . guarda )
  if 34 - 34: ii + iI11I1II1I1I + Ii - o00O0oo + Ii
  self . bsube = pyxbmct . Button ( 'Nube' ,
 textColor = '0xFFFBFCFA' ,
 focusedColor = '0xFF238303' ,
 noFocusTexture = os . path . join ( I1IiI , 'bgris.png' ) ,
 focusTexture = os . path . join ( I1IiI , 'bnaranja.png' ) )
  self . placeControl ( self . bsube , 1 , 2 )
  if 65 - 65: OoOO0ooOOoo0O
  self . connect ( self . bsube , self . sube )
  if 6 - 6: OOooOOo / ii11ii1ii % o0oO0
  self . url = pyxbmct . Label ( '' )
  self . placeControl ( self . url , 2 , 0 , 1 , 3 )
  self . url . setVisible ( False )
  if 84 - 84: Ii . o0000oOoOoO0o
  self . bsalir = pyxbmct . Button ( 'Salir' ,
 textColor = '0xFFFBFCFA' ,
 focusedColor = '0xFF238303' ,
 noFocusTexture = os . path . join ( I1IiI , 'bgris.png' ) ,
 focusTexture = os . path . join ( I1IiI , 'bnaranja.png' ) )
  self . placeControl ( self . bsalir , 3 , 1 )
  if 100 - 100: o0oO0 - o0oO0 - ooo0Oo0
  self . connect ( self . bsalir , self . close )
  if 20 - 20: ii
 def set_navigation ( self ) :
  if 13 - 13: ii1I - o0oO0 % oO0o0ooO0 / iI11I1II1I1I % i11Ii11I1Ii1i
  if 97 - 97: Ii
  if 32 - 32: ii11ii1ii * o0o00Oo0O % oO0o0ooO0 % o0oO0 . iiI1iIiI
  if 61 - 61: i1
  if 79 - 79: ii11ii1ii + OOooOOo - i11Ii11I1Ii1i
  if 83 - 83: i1
  if 64 - 64: OoOO % i1 % i11Ii11I1Ii1i / OoOO0ooOOoo0O - OoOO
  self . bguarda . setNavigation ( self . bsalir , self . bsalir , self . bsube , self . bsube )
  self . bsube . setNavigation ( self . bsalir , self . bsalir , self . bguarda , self . bguarda )
  self . bsalir . setNavigation ( self . bguarda , self . bguarda , self . bguarda , self . bguarda )
  if 74 - 74: i11Ii11I1Ii1i * o0o00Oo0O
  if 89 - 89: oO0o0ooO0 + ii11ii1ii
  self . setFocus ( self . bguarda )
  if 3 - 3: ii1I / OOooOOo % O0oO * Ii / o0o00Oo0O * O0oO
 def setAnimation ( self , control ) :
  if 49 - 49: oO0o0ooO0 % o0oO0 + ii1I . OOooOOo % o00O0oo
  control . setAnimations ( [ ( 'WindowOpen' , 'effect=fade start=0 end=100 time=500' , ) ,
 ( 'WindowClose' , 'effect=fade start=100 end=0 time=500' , ) ] )
 def guarda ( self ) :
  i1I11i ( 0 )
  if 48 - 48: O0oO + O0oO / ooO0OO000o / iI11I1II1I1I
 def sube ( self ) :
  OoOoOO00 ( self )
  if 20 - 20: o0000oOoOoO0o
def I11i ( message , seconds ) :
 xbmc . executebuiltin ( 'XBMC.Notification(%s, %s, %s, %s)' % ( 'KELEBEK' , message , str ( seconds ) , I1ii11iIi11i ) )
 if 77 - 77: OoOO0ooOOoo0O / O0oO
def O0O ( message , seconds ) :
 Ooooo = threading . Thread ( target = I11i , args = ( message , seconds ) )
 Ooooo . start ( )
 if 2 - 2: i1 / IIII - iiI1iIiI . OoOO0ooOOoo0O
def oOooOoO0Oo0O ( path , ziph ) :
 global O0OoOoo00o
 global OOooO
 global iiiI11
 try :
  if 88 - 88: OoOO + o0o00Oo0O / OoOO0ooOOoo0O * i11Ii11I1Ii1i
  for iiiIi1i1I , oOO00oOO , OoOo in os . walk ( path ) :
   if 18 - 18: Ii
   for file in OoOo :
    if ( O0OoOoo00o . iscanceled ( ) ) :
     return
    OOooO = OOooO + 1
    Ii11I = OOooO / float ( iiiI11 ) * 100
    O0OoOoo00o . update ( int ( Ii11I ) , 'Copiando [COLOR red]%s[/COLOR]' % file + '\n' + 'Por favor, espera...' )
    if ( os . path . exists ( os . path . join ( iiiIi1i1I , file ) ) ) :
     if 69 - 69: oO0o0ooO0 % ooo0Oo0 - o0000oOoOoO0o + ooo0Oo0 - o0o00Oo0O % ii
     ziph . write ( os . path . join ( iiiIi1i1I , file ) )
    else :
     xbmc . log ( '[%s] %s %s %s' % ( 'FILE NOT EXISTS:' , iiiIi1i1I , oOO00oOO , file ) , 2 )
 except Exception :
  Iii111II , iiii11I , Iii111II = sys . exc_info ( )
  xbmc . log ( '[%s] %s' % ( 'EXCEPTION:' , str ( iiii11I ) ) , 2 )
  xbmc . executebuiltin ( 'Notification(%s, %s)' % ( 'ERROR:' , str ( iiii11I ) ) )
  if 96 - 96: ooO0OO000o % o0oO0 . IIII + ii * oO0o0ooO0 - OoOO0ooOOoo0O
def iI1 ( path , ziph ) :
 try :
  if 10 - 10: IIII / OOooOOo * IIII
  if ( os . path . exists ( os . path . join ( path ) ) ) :
   if 29 - 29: o00O0oo % OOooOOo + i1 / o0000oOoOoO0o + IIII * o0000oOoOoO0o
   ziph . write ( path )
  else :
   xbmc . log ( '[%s] %s' % ( 'FILE NOT EXISTS:' , path ) , 2 )
 except Exception :
  Iii111II , iiii11I , Iii111II = sys . exc_info ( )
  xbmc . log ( '[%s] %s' % ( 'EXCEPTION:' , str ( iiii11I ) ) , 2 )
  xbmc . executebuiltin ( 'Notification(%s, %s)' % ( 'ERROR:' , str ( iiii11I ) ) )
  if 42 - 42: o0oO0 + oO0o0ooO0
  if 76 - 76: ooo0Oo0 - OoOO
def i1I11i ( flag ) :
 if ( flag == 0 ) :
  oOooOOo00Oo0O = xbmcgui . Dialog ( )
  O00oO = oOooOOo00Oo0O . browse ( 3 , 'KELEBEK' , '' )
 else :
  O00oO = xbmc . translatePath ( 'special://home/addons/' + Oo )
  if 39 - 39: iiI1iIiI - ooO0OO000o * OoOO % o0000oOoOoO0o * ooO0OO000o % ooO0OO000o
 try :
  if ( O00oO != '' ) :
   if 59 - 59: iI11I1II1I1I + OOooOOo - o0000oOoOoO0o - OOooOOo + IIII / o00O0oo
   if 24 - 24: O0oO . i11Ii11I1Ii1i % IIII + i1 % OoOO0ooOOoo0O
   if ( os . path . exists ( os . path . join ( O00oO , 'SettingsGD.zip' ) ) ) :
    os . remove ( os . path . join ( O00oO , 'SettingsGD.zip' ) )
   I11III1II = zipfile . ZipFile ( os . path . join ( O00oO , 'SettingsGD.zip' ) , 'w' , zipfile . ZIP_DEFLATED )
   iI1I111Ii111i = xbmc . translatePath ( os . path . join ( 'special://home/userdata/addon_data' , 'plugin.video.gdrive' ) )
   iI1I111Ii111i = iI1I111Ii111i . replace ( '/' , os . path . sep )
   if ( os . path . exists ( iI1I111Ii111i ) ) :
    os . chdir ( iI1I111Ii111i )
    iI1 ( './settings.xml' . replace ( '/' , os . path . sep ) , I11III1II )
    I11III1II . close ( )
    if ( flag == 0 ) :
     O0O ( 'PROCESS FINISHED' , 4000 )
     oOooOOo00Oo0O . ok ( 'KELEBEK BackUp Settings GDrive' , '[COLOR yellow]File SettingsGD.zip[/COLOR] [COLOR blue]Created [/COLOR]' )
    return True
   else :
    xbmc . executebuiltin ( 'Notification(%s, %s)' % ( 'Carpeta no existente:' , iI1I111Ii111i ) )
    return False
 except Exception :
  Iii111II , iiii11I , Iii111II = sys . exc_info ( )
  xbmc . log ( '[%s] %s' % ( 'EXCEPTION:' , str ( iiii11I ) ) , 2 )
  xbmc . executebuiltin ( 'Notification(%s, %s)' % ( 'ERROR:' , str ( iiii11I ) ) )
  return False
  if 7 - 7: i1 * OoOO % oO0o0ooO0 . iiI1iIiI
def OoOoOO00 ( ventana ) :
 if ( i1I11i ( 1 ) ) :
  Ii1iIiII1ii1 = 'https://api.anonfiles.com/upload'
  ooOooo000oOO = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + Oo , 'SettingsGD.zip' ) )
  Oo0oOOo = open ( ooOooo000oOO , 'rb' )
  OoOo = { 'file' : ( Oo0oOOo ) }
  Oo0OoO00oOO0o = requests . post ( Ii1iIiII1ii1 , files = OoOo )
  if 80 - 80: oO0o0ooO0 + IIII - IIII % i11Ii11I1Ii1i
  import json
  OoOO0oo0o = json . loads ( Oo0OoO00oOO0o . text )
  if OoOO0oo0o [ 'status' ] :
   II11i1I11Ii1i = OoOO0oo0o [ 'data' ] [ 'file' ] [ 'url' ] [ 'short' ]
   O000O0oOO0 = OoOO0oo0o [ 'data' ] [ 'file' ] [ 'url' ] [ 'full' ]
   xbmc . log ( '[SUCCESS] Short URL: ' + II11i1I11Ii1i , 2 )
   ventana . url . setLabel ( 'SUBIDO A ' + II11i1I11Ii1i )
   ventana . url . setVisible ( True )
   Oo0oOOo . close ( )
   os . remove ( ooOooo000oOO )
  else :
   O0ooo0O0oo0 = OoOO0oo0o [ 'error' ] [ 'message' ]
   oo0oOo = OoOO0oo0o [ 'error' ] [ 'type' ]
   xbmc . log ( '[ERROR] ' + O0ooo0O0oo0 + ' ' + oo0oOo , 2 )
 else :
  xbmc . executebuiltin ( 'Notification(%s, %s)' % ( 'ERROR:' , 'Se ha producido un error' ) )
  if 89 - 89: OoOO0ooOOoo0O
  if 68 - 68: OoOO * ii % o0o00Oo0O + OoOO + i1
try :
 i11i1I1 = ii11i ( '' )
 i11i1I1 . doModal ( )
 if 36 - 36: iI11I1II1I1I / OoOO0ooOOoo0O * IIII
 if 65 - 65: o0oO0 . iI11I1II1I1I / o0o00Oo0O - o0oO0
 del i11i1I1
except Exception :
 Iii111II , iiii11I , Iii111II = sys . exc_info ( )
 xbmc . log ( '[%s] %s' % ( 'EXCEPTION:' , str ( iiii11I ) ) , 2 )
 xbmc . executebuiltin ( 'Notification(%s, %s)' % ( 'ERROR:' , str ( iiii11I ) ) )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
